http - client server relation - client request from server, server responds
MOST POPULAR STATUS CODES
200 - OK
301 - moved permanently
403 - forbidden
404 - not found
500 - internal server error

*** DJANGO
webform already build
to install run django-admin startproject PROJECT_NAME
will create folder PROJECT_NAME 
manage.py is used to execute commands - DONT TOUCh
settings.py - configuration settings - need to be changed
urls.py - table of contents for the applications

***to run the application
run python3 manage.py runserver
go to the link to check if the server running



****create an application
run python3 manage.py startapp APP_NAME
will create another folder with APP_NAME

1. go into PROJECT_NAME / settings.py
and add the name of the app into
  INSTALLED_APPS = [
      'APP_name',
      ...
  ]


2. go into PROJECT_NAME / urls.py
urlpatterns = [
    path('admin/', admin.site.urls),
    path('APP_NAME/', include("APP_NAME.urls")),
]

3. go into APP_NAME and create urls.py with a single route

from django.urls import path
from . import views

app_name = 'APP_NAME'

urlpatterns = [
  path("", views.index, name='index'),
  ]


4. go into APP_NAME / views.py and define a function

from django.http import HttpResponse
from django.shortcuts import render

# Create your views here.
- testing
def index(request):
  return HttpResponse('hello, world')

- render
def greet(request, name):
  return render(request, "APP_NAME/TEMPLATE_NAME.html", {
    #context for the template
    "name": name.capitalize(),
  })


*** adding styling to the html
inside the APP_NAME create static / APP_NAME folders / styles.css
in the APP_NAME / templates / APP_NAME / ...html file add on the very first line
{% load styles %}
and on the header
<link rel="stylesheet" href="{% static 'APP_NAME/styles.css' %}">



*** html modules - template inheritance
in APP_NAME / templates / APP_NAME / create layout.html
inside body add
  {% block body %}
  {% endblock %}

in the templates / APP_NAME / html....
{% extends "tasks/layout.html" %}

{% block body %}
  custom html
{% endblock %}

*** links between pages - DONT HARDCODE - AVOID NAMESPACE COLLISION see APP_NAME / urls.py
based on the name set in urlpatterns from APP_NAME / urls.py
<a href="{% url 'APP_NAME: NAME_OF_THE_page/ROUTE' %}">Add a task</a>
example
<a href="{% url 'tasks: add' %}">Add a task</a>

*** CSRF verification
- is turned on by default
- add {% csrf_token %} into form 
  <form action="{% url 'tasks:add' %}" method="post">
    {% csrf_token %}
    <input type="text" name="task">
    <input type="submit" value="Submit">
  </form>


*** creating forms with django
both client and server validation
on APP_NAME / views.py add 
from django import forms

create a new class form
class NewTaskForm(forms.Form):
  #define fields
  task = forms.CharField(label="New Task")

when you render the request, add 
def add(request):
  return render(request, "tasks/add.html", {
    "form": NewTaskForm()
  })

inside add.html plugin the form
  <form action="{% url 'tasks:add' %}" method="post">
  {% csrf_token %}
  {{ form }}
</form>


you can add multiple fields, editing the class form
class NewTaskForm(forms.Form):
  #define fields
  task = forms.CharField(label="New Task")
  priority = forms.IntegerField(label='Priority', min_value=1, max_value=10)

server side validation
modify the add function from views.py

def add(request):
  if request.method == "POST":
    form = NewTaskForm(request.POST) # contains all the data user submited

  if form.is_valid(): 
    task = form.cleaned_data['task']
    tasks.append(task)
  else: # if the form is not valid, will return the form with the already submited data back, to display info about errors
    return render(request, 'tasks/add.html', {
      "form": form
    })

   # if the page was called without a form submited, a new form is rendered 
  return render(request, "tasks/add.html", {
    "form": NewTaskForm()
  })

*** redirect
-add
from django.http import HttpResponse, HttpResponseRedirect
from django.urls import reverse

-add in the APP_NAME / views.py inside function where you want the redirect
return HttpResponseRedirect(reverse("tasks:index"))

*** session
-instead of using local variables, store the data inside user session
- must run python3 manage.py migrate
-in index function
def index(request):
  if 'tasks' not in request.session:
      request.session['tasks'] = []

CLASS BASED VIEWS
cleaner code
django views written as python classes
default method is GET

- FUNCTION base view
* app/views.py
from django.shortcuts import render
from .models import Product

def productList(request):
  products = Product.objects.all() - get all products from db
  context = {'products":products} - set the context to a dictionary
  return render(request, 'base/product_list.html', context)

*app/urls.py
from django.urls import path, include
from . import views

urlpatterns = [
  path('products/', views.productList, name='products')
]

- CLASS based view
* app/views.py
from django.views.generic.list import ListView
from .models import Product

class ProductList(ListView):
  model = Product

*app/urls.py
from . import views
urlpatterns = [
  path('products/', views.ProductList.as_view(), name='products')
]
as_view() method - 


#restrict user to acceas any page if not logged in
from django.contrib.auth.mixins import LoginRequiredMixin 
add in LoginRequiredMixin in class parameters:
class TaskList(LoginRequiredMixin, ListView):
    model = Task
    context_object_name = "tasks"
    template_name = 'base/tasks.html'


SQL MIGRATIONS MODELS
data: table of columns and rows
SQLite - store all data in a single file (django default)
each piece of data has a type:
  - text (strings)
  - numeric (other type of numeric type of data)
  - integer (numbers +-)
  - real (numbers with decimal)
  - blob (binary data: files)

MySQL data types:
- CHAR (size) - max number of characters
- VARCHAR (size) - variable lenght - min max number of characters
- INT - different bytes amount for storing numbers
- BigINT
- FLOAT
- DOUBLE - more recise than FLOAT

.mode columns
.headers yes

*create a table example
- create name of the table and the name of columns
- each of the columns has a type with additional constraints
CREATE TABLE flights ( 
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  origin TEXT NOT NULL,
  destination TEXT NOT NULL,
  duration INTEGER NOT NULL
)
 * insert data in columns
 INSERT INTO flights (origin, destination, duration) VALUES("aaa", "aaaa", 450)


* sql queries - get data from table

AVG
COUNT
MAX
MIN
SUM
* - all
% - zero or more characters

LIMIT BY - limit the number of queries result
ORDER BY - how the results are returned, order by destination, duration
GROUP BY - group by a criteria, GROUP BY origin
HAVING

SELECT * FROM flights;
SELECT origin, destination FROM flights;
SELECT * FROM flights WHERE id = 3;
SELECT * FROM flights WHERE origin = "New York";
SELECT * FROM flights WHERE duration > 500;
SELECT * FROM flights WHERE duration > 500 AND destination = "Paris";
SELECT * FROM flights WHERE duration > 500 OR destination = "Paris";
SELECT * FROM flights WHERE origin IN ("New York", "Lima");
SELECT * FROM flights WHERE origin LIKE "%a%"; 


* update data
UPDATE flights
  SET duration = 430
  WHERE origin = "New York"
  AND destination = "London";

* delete data
DELETE FROM FLIGHTS WHERE destination = "Tokio";


JOINING TABLES - JOIN takes multiple tables and joins them together
relate different tables by FOREIGN KEYS
Many To Many relationship / mapping

SELECT first, origin, destination FROM flights JOIN passangers ON passangers.flight_id = flight_id;

JOIN / INNER JOIN - default
LEFT OUTER JOIN - if something doesnt match
RIGHT OUTER JOIN - 
FULL OUTER JOIN -

CREATE INDEX
CREATE INDEX name_index ON passengers (last) - search more efficiently on last name from that table

SQL INJECTION ATTACK
- escape characters

DJANGO MODELS
Creating models: represents data to be stored in db
create a class for each table to be stored

class Flight(models.Model):
  origin = models.CharField(max_lenght=64)
  destination = models.CharField(max_lenght=64)
  duration = models.IntegerField()

  # this will return a string representation of the entry
  def __str__(self):
  return f"{self_id}: {self.origin} to {self.destination}"

MAKE CROSS TABLES

class Airport(models.Model):
    code = models.CharField(max_length=3)
    city = models.CharField(max_length=64)

    def __str__(self):
        return f"{self.city} ({self.code})"

class Flight(models.Model):
    origin = models.ForeignKey(Airport, on_delete=models.CASCADE, related_name="departures")
    destination = models.ForeignKey(Airport, on_delete=models.CASCADE, related_name="arrivals")
    duration = models.IntegerField()

    def __str__(self):
        return f"{self.id}: {self.origin} to {self.destination}"

- origin / destinations are foreign keys, which means they refer to another object(in this case Airport)
- by entering Airport as first argument, we are specifying the type of object this field refers to
- on_delete=models.CASCADE gives intructions for that should happen if an airport is deleted (all flights associated with it will be also be deleted)
  other options: 
                PROTECT - prevent deletion
                RESTRICT - prevent deletions
- related_name = "name" - gives us a way to search for all flights with a given airport as their origin or destination (ex. lhr.arrivals.all())

MIGRATIONS - tell django that are some changes and apply them to DB
from django.urls import path, include - create a file with instructions for creating tables in db

from django.urls import path, include - apply the migrations / create the table(s)

USING SHELL 
python3 manage.py shell 

> from APP_NAME.models import CLASS_NAME
> f = Flight(origin="New York", destination="London", duration=415)
> f.save()
- will insert data in db

to make a querie: Flight.objects.all()

create a flight: nrt = Airport(code="NRT", city="Tokyo");
create a airport: f = Flight(origin=jfk, destination=lhr, duration=415)

you can display info
f // <Flight: 1: New York (JFK) to London (LHR)>
f.origin // <Airport: New York (JFK)>

using the related name to query by airport of arrivals
nrt.arrivals.all() // <QuerySet [<Flight: 1: New York (JFK) to London (LHR)>]>

DJANGO ADMIN
create a superuser usign manage.py createsuperuser
  ADD THE MODELS INTO APP_NAME / admin.py

  from .models import MODELS_CLASS_NAME

  admin.site.register(MODELS_CLASS_NAME)

MANIPULATE DB via app
!!!! ALWAYS VIA POST METHOD

CONFIGURE ADMIN PAGES
- create classes with options, see documentation

from .models import TASK_NAME or *

class FlightAdmin(admin.ModelAdmin):
    list_display = ("id", "origin", "destination", "duration")


class PassengerAdmin(admin.ModelAdmin):
    filter_horizontal = ('flights',)

admin.site.register(Flight, FlightAdmin)
admin.site.register(Passenger, PassengerAdmin)

AUTHENTICATION METHOD
create app users
in PROJECT_NAME / settings add APP_NAME
in PROJECT_NAME / urls add path('users/', include('users.urls')), 

check is the user is logged in
 {% if request.user.is_authenticated %}
    <a href="">Logout</a>
    {% else %}
    <a href="">Login</a>
    <a href="">Register</a>
    {% endif %}

create users / urls.py
- with 3 routes
from django.urls import path
from . import views

app_name = 'users'

urlpatterns = [
    path("", views.index, name='index'),
    path("login", views.login_view, name='login'),
    path("logout", views.loqout_view, name='logout'),
]

in users / views add 

from django.contrib.auth import authenticate, login, logout
and create the 3 functions:
def index(request):
    if not request.user.is_authenticated:
        return HttpResponseRedirect(reverse('users:login'))
    return render(request, "users/user.html")

def login_view(request):
    #get the inputs from the form
    if request.method == "POST":
        username = request.POST['username']
        password = request.POST['password']
        #check credentials usign authenticate
        user = authenticate(request, username=username, password=password)

        if user is not None:
            login(request, user)
            return HttpResponseRedirect(reverse("users:index"))
        else:
            return render(request, "users/login.html", {
                "message": "Invalid credentials"
            })

    return render(request, "users/login.html",{})


def logout_view(request):
    logout(request)
    return render(request, "users/login.html", {
            "message": "Logged out."
        })


templates / login
{% extends "users/layout.html" %}

{% block body %}

{% if message %}
    <div>{{ message }}</div>
{% endif %}

    <form action="{% url 'users:login' %}" method="POST">
        {% csrf_token %}
        <input type="text" name="username" placeholder="Username">
        <input type="password" name="password" placeholder="Password">
        <input type="submit" value="Login">
    </form>

{% endblock %}




